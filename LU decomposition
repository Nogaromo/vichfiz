import numpy as np
from scipy.linalg import lu_factor

def diy_lu(a):
    """Создает LU - разложение матрицы `a`.

    Наивное LU - разложение: работает столбец за столбцом, накапливает элементарные треугольные матрицы.
    Без выбора главного элемента.
    """
    N = a.shape[0]

    u = a.copy()
    L = np.eye(N)
    P = np.eye(N)
    P1 = P.copy()
    for j in range(N - 1):
        lam = np.eye(N)
        while True:
            if u[j, j] == 0 and u[N-1, N-1] != 0:

                P1[j, :] = P1[j+1, :]
                P1[j+1, :] = P[j, :]

                u = P1 @ u

                gamma = u[j + 1:, j] / u[j, j]

                lam[j + 1:, j] = -gamma

                u = lam @ u

                lam[j + 1:, j] = gamma
                L = L @ lam

            else:
                gamma = u[j + 1:, j] / u[j, j]

                lam[j + 1:, j] = -gamma

                u = lam @ u

                lam[j + 1:, j] = gamma
                L = L @ lam
                break



    return L, u, P1


def zerocheck(b):

    N = b.shape[0]
    zero = 0
    u = b.copy()
    L = np.eye(N)
    for j in range(N - 1):
        lam = np.eye(N)
        if u[j, j] != 0:
            gamma = u[j + 1:, j] / u[j, j]
            lam[j + 1:, j] = -gamma
            u = lam @ u

            lam[j + 1:, j] = gamma
            L = L @ lam
        else:
            zero = 1
    if zero == 1:
        return "Zero detected"
    else:
        return "Ok"


N = 6
a = np.zeros((N, N), dtype=float)
for i in range(N):
    for j in range(N):
        a[i, j] = 3. / (0.6*i*j + 1)


np.set_printoptions(precision=3)


a1 = a.copy()
a1[1, 1] = 3


print(zerocheck(a))
print(zerocheck(a1))


L, u, Pa = diy_lu(a)

print(L, "\n")
print(u, "\n")
print(Pa, "\n")
# Быстрый тест на адекватность: L @ U должна быть равна изначальной матрице с точностью до ошибок округления.
print(Pa @ L @ u - a)
print("-"*250, end = "\n\n\n\n")


l, u, Pb = diy_lu(a1)

print(l, "\n\n")
print(u, "\n\n")
print(Pb, "\n")
print(Pb @ l @ u - a1, end = "\n\n\n\n")
print("-"*250, end = "\n\n\n\n")

def initialmatrix(L, u, P1):
    A = np.transpose(P1) @ L @ u
    return A

x1 , x2, x3 =diy_lu(a)
y1 , y2, y3 =diy_lu(a1)
print(initialmatrix(x1, x2, x3) - a, end = "\n\n")
print(initialmatrix(y1, y2, y3) - a1)
