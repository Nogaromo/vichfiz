import numpy as np


def jacobi(A, b, N=100):


    x = np.zeros(len(A[0]))

    D = np.zeros((n, n))
    for i in range(n):
        D[i, i] = A[i, i]

    B = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            B[i, j] = 1 / D[i, i] * (D[i, j] - A[i, j])

    for i in range(N):
        x = np.dot(B, x) + np.dot(np.linalg.inv(D), b)
    return x, np.linalg.norm(B)


rnd = np.random.RandomState(1234)
n = 10
A = rnd.uniform(size=(n, n)) + np.diag([15]*n)
b = rnd.uniform(size=n)
x, norm_B = jacobi(A, b)
print(x, '\nНорма матрицы B:\n', norm_B)
print(np.round(np.linalg.norm(np.dot(A, x)-b)))
